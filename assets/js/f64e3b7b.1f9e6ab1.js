(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[213],{8297:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var i=t(2122),o=t(9756),s=(t(7294),t(3905)),r=["components"],a={sidebar_position:5},l={unversionedId:"core/views",id:"core/views",isDocsHomePage:!1,title:"Views",description:"Views are effectively React Functional Components combined with Oblong's dependency injection. Unlike the other parts of Oblong, Views do not need to be resolved to be used.",source:"@site/docs/core/views.md",sourceDirName:"core",slug:"/core/views",permalink:"/oblong/docs/core/views",editUrl:"https://github.com/travislwatson/oblong/edit/master/website/docs/core/views.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"State",permalink:"/oblong/docs/core/state"},next:{title:"Big O",permalink:"/oblong/docs/core/big-o"}},d=[{value:"Syntax",id:"syntax",children:[{value:"View Name Duplication",id:"view-name-duplication",children:[]},{value:"Dependencies",id:"dependencies",children:[]},{value:"Props",id:"props",children:[]}]},{value:"Unit Testing",id:"unit-testing",children:[]}],c={toc:d};function p(e){var n=e.components,t=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Views are effectively React Functional Components combined with Oblong's dependency injection. Unlike the other parts of Oblong, Views do not need to be resolved to be used."),(0,s.kt)("p",null,"Hooks can be used, but class components are not supported."),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const MyView = O.view('MyView')\n  .with({ your, dependencies, here })\n  .as((o) => <h1>Hello World</h1>)\n")),(0,s.kt)("h3",{id:"view-name-duplication"},"View Name Duplication"),(0,s.kt)("p",null,"In the above example, you see ",(0,s.kt)("inlineCode",{parentName:"p"},"MyView")," twice, so you might want to eliminate the duplication. The string version supplied to the ",(0,s.kt)("inlineCode",{parentName:"p"},"O.view(...)")," function is indeed optional; this is perfectly valid: ",(0,s.kt)("inlineCode",{parentName:"p"},"O.view()"),"."),(0,s.kt)("p",null,"The string version is used for React DevTools and error messages."),(0,s.kt)("h3",{id:"dependencies"},"Dependencies"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},".with({ ... })")," call allows you to specify any dependencies your view has. These dependencies will be available as properties on the first argument supplied to your view body."),(0,s.kt)("h3",{id:"props"},"Props"),(0,s.kt)("p",null,"Props can be used as the second argument:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"type MyViewProps = { name: string }\n\nconst MyView = O.view('MyView')\n  .with({ your, dependencies, here })\n  .as((o, props: MyViewProps) => <h1>Hello World</h1>)\n\n// Usage like <MyView name=\"Travis\" />\n")),(0,s.kt)("h2",{id:"unit-testing"},"Unit Testing"),(0,s.kt)("p",null,"TODO"))}p.isMDXComponent=!0}}]);